plugins {
    id 'com.wgsoft.game.clanomania.common-conventions'
    id 'com.android.application'
}

configurations {
    natives
}

dependencies {
    implementation project(':core')
    implementation "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86_64"
}

ext {
    androidVersion = 31
}

android {
    buildToolsVersion "31.0.0"
    compileSdkVersion androidVersion
    namespace 'com.wgsoft.game.clanomania'

    sourceSets {
        main {
            jniLibs.srcDirs = ['src/main/libs']
        }
    }

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion androidVersion
        versionCode 1
        versionName version
    }
}

task copyAndroidNatives {
    doFirst {
        file('src/main/libs/armeabi').mkdirs()
        file('src/main/libs/armeabi-v7a').mkdirs()
        file('src/main/libs/arm64-v8a').mkdirs()
        file('src/main/libs/x86_64').mkdirs()
        file('src/main/libs/x86').mkdirs()

        configurations.natives.copy().files.each { jar ->
            def outputDir = null

            if(jar.name.endsWith('natives-arm64-v8a.jar')) {
                outputDir = file('src/main/libs/arm64-v8a')
            }

            if(jar.name.endsWith('natives-armeabi-v7a.jar')) {
                outputDir = file('src/main/libs/armeabi-v7a')
            }

            if(jar.name.endsWith('natives-armeabi.jar')) {
                outputDir = file('src/main/libs/armeabi')
            }

            if(jar.name.endsWith('natives-x86_64.jar')) {
                outputDir = file('src/main/libs/x86_64')
            }

            if(jar.name.endsWith('natives-x86.jar')) {
                outputDir = file('src/main/libs/x86')
            }

            if(outputDir != null) {
                copy {
                    from zipTree(jar)
                    into outputDir
                    include '*.so'
                }
            }
        }
    }
}

tasks.whenTaskAdded {
    if(it.name.contains('package')) {
        it.dependsOn copyAndroidNatives
    }
}
